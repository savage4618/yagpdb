// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PatreonTier is an object representing the database table.
type PatreonTier struct {
	TierID int64 `boil:"tier_id" json:"tier_id" toml:"tier_id" yaml:"tier_id"`
	Slots  int   `boil:"slots" json:"slots" toml:"slots" yaml:"slots"`

	R *patreonTierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L patreonTierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PatreonTierColumns = struct {
	TierID string
	Slots  string
}{
	TierID: "tier_id",
	Slots:  "slots",
}

var PatreonTierTableColumns = struct {
	TierID string
	Slots  string
}{
	TierID: "patreon_tiers.tier_id",
	Slots:  "patreon_tiers.slots",
}

// Generated where

var PatreonTierWhere = struct {
	TierID whereHelperint64
	Slots  whereHelperint
}{
	TierID: whereHelperint64{field: "\"patreon_tiers\".\"tier_id\""},
	Slots:  whereHelperint{field: "\"patreon_tiers\".\"slots\""},
}

// PatreonTierRels is where relationship names are stored.
var PatreonTierRels = struct {
}{}

// patreonTierR is where relationships are stored.
type patreonTierR struct {
}

// NewStruct creates a new relationship struct
func (*patreonTierR) NewStruct() *patreonTierR {
	return &patreonTierR{}
}

// patreonTierL is where Load methods for each relationship are stored.
type patreonTierL struct{}

var (
	patreonTierAllColumns            = []string{"tier_id", "slots"}
	patreonTierColumnsWithoutDefault = []string{"tier_id", "slots"}
	patreonTierColumnsWithDefault    = []string{}
	patreonTierPrimaryKeyColumns     = []string{"tier_id"}
	patreonTierGeneratedColumns      = []string{}
)

type (
	// PatreonTierSlice is an alias for a slice of pointers to PatreonTier.
	// This should almost always be used instead of []PatreonTier.
	PatreonTierSlice []*PatreonTier

	patreonTierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	patreonTierType                 = reflect.TypeOf(&PatreonTier{})
	patreonTierMapping              = queries.MakeStructMapping(patreonTierType)
	patreonTierPrimaryKeyMapping, _ = queries.BindMapping(patreonTierType, patreonTierMapping, patreonTierPrimaryKeyColumns)
	patreonTierInsertCacheMut       sync.RWMutex
	patreonTierInsertCache          = make(map[string]insertCache)
	patreonTierUpdateCacheMut       sync.RWMutex
	patreonTierUpdateCache          = make(map[string]updateCache)
	patreonTierUpsertCacheMut       sync.RWMutex
	patreonTierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single patreonTier record from the query using the global executor.
func (q patreonTierQuery) OneG(ctx context.Context) (*PatreonTier, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single patreonTier record from the query.
func (q patreonTierQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PatreonTier, error) {
	o := &PatreonTier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for patreon_tiers")
	}

	return o, nil
}

// AllG returns all PatreonTier records from the query using the global executor.
func (q patreonTierQuery) AllG(ctx context.Context) (PatreonTierSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PatreonTier records from the query.
func (q patreonTierQuery) All(ctx context.Context, exec boil.ContextExecutor) (PatreonTierSlice, error) {
	var o []*PatreonTier

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PatreonTier slice")
	}

	return o, nil
}

// CountG returns the count of all PatreonTier records in the query using the global executor
func (q patreonTierQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PatreonTier records in the query.
func (q patreonTierQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count patreon_tiers rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q patreonTierQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q patreonTierQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if patreon_tiers exists")
	}

	return count > 0, nil
}

// PatreonTiers retrieves all the records using an executor.
func PatreonTiers(mods ...qm.QueryMod) patreonTierQuery {
	mods = append(mods, qm.From("\"patreon_tiers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"patreon_tiers\".*"})
	}

	return patreonTierQuery{q}
}

// FindPatreonTierG retrieves a single record by ID.
func FindPatreonTierG(ctx context.Context, tierID int64, selectCols ...string) (*PatreonTier, error) {
	return FindPatreonTier(ctx, boil.GetContextDB(), tierID, selectCols...)
}

// FindPatreonTier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPatreonTier(ctx context.Context, exec boil.ContextExecutor, tierID int64, selectCols ...string) (*PatreonTier, error) {
	patreonTierObj := &PatreonTier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"patreon_tiers\" where \"tier_id\"=$1", sel,
	)

	q := queries.Raw(query, tierID)

	err := q.Bind(ctx, exec, patreonTierObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from patreon_tiers")
	}

	return patreonTierObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PatreonTier) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PatreonTier) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no patreon_tiers provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(patreonTierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	patreonTierInsertCacheMut.RLock()
	cache, cached := patreonTierInsertCache[key]
	patreonTierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			patreonTierAllColumns,
			patreonTierColumnsWithDefault,
			patreonTierColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(patreonTierType, patreonTierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(patreonTierType, patreonTierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"patreon_tiers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"patreon_tiers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into patreon_tiers")
	}

	if !cached {
		patreonTierInsertCacheMut.Lock()
		patreonTierInsertCache[key] = cache
		patreonTierInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single PatreonTier record using the global executor.
// See Update for more documentation.
func (o *PatreonTier) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PatreonTier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PatreonTier) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	patreonTierUpdateCacheMut.RLock()
	cache, cached := patreonTierUpdateCache[key]
	patreonTierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			patreonTierAllColumns,
			patreonTierPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update patreon_tiers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"patreon_tiers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, patreonTierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(patreonTierType, patreonTierMapping, append(wl, patreonTierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update patreon_tiers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for patreon_tiers")
	}

	if !cached {
		patreonTierUpdateCacheMut.Lock()
		patreonTierUpdateCache[key] = cache
		patreonTierUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q patreonTierQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q patreonTierQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for patreon_tiers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for patreon_tiers")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PatreonTierSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PatreonTierSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patreonTierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"patreon_tiers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, patreonTierPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in patreonTier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all patreonTier")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PatreonTier) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PatreonTier) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no patreon_tiers provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(patreonTierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	patreonTierUpsertCacheMut.RLock()
	cache, cached := patreonTierUpsertCache[key]
	patreonTierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			patreonTierAllColumns,
			patreonTierColumnsWithDefault,
			patreonTierColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			patreonTierAllColumns,
			patreonTierPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert patreon_tiers, could not build update column list")
		}

		ret := strmangle.SetComplement(patreonTierAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(patreonTierPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert patreon_tiers, could not build conflict column list")
			}

			conflict = make([]string, len(patreonTierPrimaryKeyColumns))
			copy(conflict, patreonTierPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"patreon_tiers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(patreonTierType, patreonTierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(patreonTierType, patreonTierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert patreon_tiers")
	}

	if !cached {
		patreonTierUpsertCacheMut.Lock()
		patreonTierUpsertCache[key] = cache
		patreonTierUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single PatreonTier record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PatreonTier) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PatreonTier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PatreonTier) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PatreonTier provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), patreonTierPrimaryKeyMapping)
	sql := "DELETE FROM \"patreon_tiers\" WHERE \"tier_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from patreon_tiers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for patreon_tiers")
	}

	return rowsAff, nil
}

func (q patreonTierQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q patreonTierQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no patreonTierQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from patreon_tiers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for patreon_tiers")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PatreonTierSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PatreonTierSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patreonTierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"patreon_tiers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patreonTierPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from patreonTier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for patreon_tiers")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PatreonTier) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no PatreonTier provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PatreonTier) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPatreonTier(ctx, exec, o.TierID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PatreonTierSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PatreonTierSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PatreonTierSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PatreonTierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patreonTierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"patreon_tiers\".* FROM \"patreon_tiers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patreonTierPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PatreonTierSlice")
	}

	*o = slice

	return nil
}

// PatreonTierExistsG checks if the PatreonTier row exists.
func PatreonTierExistsG(ctx context.Context, tierID int64) (bool, error) {
	return PatreonTierExists(ctx, boil.GetContextDB(), tierID)
}

// PatreonTierExists checks if the PatreonTier row exists.
func PatreonTierExists(ctx context.Context, exec boil.ContextExecutor, tierID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"patreon_tiers\" where \"tier_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tierID)
	}
	row := exec.QueryRowContext(ctx, sql, tierID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if patreon_tiers exists")
	}

	return exists, nil
}

// Exists checks if the PatreonTier row exists.
func (o *PatreonTier) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PatreonTierExists(ctx, exec, o.TierID)
}
