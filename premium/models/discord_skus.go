// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DiscordSku is an object representing the database table.
type DiscordSku struct {
	SkuID int64 `boil:"sku_id" json:"sku_id" toml:"sku_id" yaml:"sku_id"`
	Slots int   `boil:"slots" json:"slots" toml:"slots" yaml:"slots"`

	R *discordSkuR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L discordSkuL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiscordSkuColumns = struct {
	SkuID string
	Slots string
}{
	SkuID: "sku_id",
	Slots: "slots",
}

var DiscordSkuTableColumns = struct {
	SkuID string
	Slots string
}{
	SkuID: "discord_skus.sku_id",
	Slots: "discord_skus.slots",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DiscordSkuWhere = struct {
	SkuID whereHelperint64
	Slots whereHelperint
}{
	SkuID: whereHelperint64{field: "\"discord_skus\".\"sku_id\""},
	Slots: whereHelperint{field: "\"discord_skus\".\"slots\""},
}

// DiscordSkuRels is where relationship names are stored.
var DiscordSkuRels = struct {
}{}

// discordSkuR is where relationships are stored.
type discordSkuR struct {
}

// NewStruct creates a new relationship struct
func (*discordSkuR) NewStruct() *discordSkuR {
	return &discordSkuR{}
}

// discordSkuL is where Load methods for each relationship are stored.
type discordSkuL struct{}

var (
	discordSkuAllColumns            = []string{"sku_id", "slots"}
	discordSkuColumnsWithoutDefault = []string{"sku_id", "slots"}
	discordSkuColumnsWithDefault    = []string{}
	discordSkuPrimaryKeyColumns     = []string{"sku_id"}
	discordSkuGeneratedColumns      = []string{}
)

type (
	// DiscordSkuSlice is an alias for a slice of pointers to DiscordSku.
	// This should almost always be used instead of []DiscordSku.
	DiscordSkuSlice []*DiscordSku

	discordSkuQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	discordSkuType                 = reflect.TypeOf(&DiscordSku{})
	discordSkuMapping              = queries.MakeStructMapping(discordSkuType)
	discordSkuPrimaryKeyMapping, _ = queries.BindMapping(discordSkuType, discordSkuMapping, discordSkuPrimaryKeyColumns)
	discordSkuInsertCacheMut       sync.RWMutex
	discordSkuInsertCache          = make(map[string]insertCache)
	discordSkuUpdateCacheMut       sync.RWMutex
	discordSkuUpdateCache          = make(map[string]updateCache)
	discordSkuUpsertCacheMut       sync.RWMutex
	discordSkuUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single discordSku record from the query using the global executor.
func (q discordSkuQuery) OneG(ctx context.Context) (*DiscordSku, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single discordSku record from the query.
func (q discordSkuQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DiscordSku, error) {
	o := &DiscordSku{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for discord_skus")
	}

	return o, nil
}

// AllG returns all DiscordSku records from the query using the global executor.
func (q discordSkuQuery) AllG(ctx context.Context) (DiscordSkuSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DiscordSku records from the query.
func (q discordSkuQuery) All(ctx context.Context, exec boil.ContextExecutor) (DiscordSkuSlice, error) {
	var o []*DiscordSku

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DiscordSku slice")
	}

	return o, nil
}

// CountG returns the count of all DiscordSku records in the query using the global executor
func (q discordSkuQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DiscordSku records in the query.
func (q discordSkuQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count discord_skus rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q discordSkuQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q discordSkuQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if discord_skus exists")
	}

	return count > 0, nil
}

// DiscordSkus retrieves all the records using an executor.
func DiscordSkus(mods ...qm.QueryMod) discordSkuQuery {
	mods = append(mods, qm.From("\"discord_skus\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"discord_skus\".*"})
	}

	return discordSkuQuery{q}
}

// FindDiscordSkuG retrieves a single record by ID.
func FindDiscordSkuG(ctx context.Context, skuID int64, selectCols ...string) (*DiscordSku, error) {
	return FindDiscordSku(ctx, boil.GetContextDB(), skuID, selectCols...)
}

// FindDiscordSku retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiscordSku(ctx context.Context, exec boil.ContextExecutor, skuID int64, selectCols ...string) (*DiscordSku, error) {
	discordSkuObj := &DiscordSku{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"discord_skus\" where \"sku_id\"=$1", sel,
	)

	q := queries.Raw(query, skuID)

	err := q.Bind(ctx, exec, discordSkuObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from discord_skus")
	}

	return discordSkuObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DiscordSku) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DiscordSku) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no discord_skus provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(discordSkuColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	discordSkuInsertCacheMut.RLock()
	cache, cached := discordSkuInsertCache[key]
	discordSkuInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			discordSkuAllColumns,
			discordSkuColumnsWithDefault,
			discordSkuColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(discordSkuType, discordSkuMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(discordSkuType, discordSkuMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"discord_skus\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"discord_skus\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into discord_skus")
	}

	if !cached {
		discordSkuInsertCacheMut.Lock()
		discordSkuInsertCache[key] = cache
		discordSkuInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single DiscordSku record using the global executor.
// See Update for more documentation.
func (o *DiscordSku) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DiscordSku.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DiscordSku) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	discordSkuUpdateCacheMut.RLock()
	cache, cached := discordSkuUpdateCache[key]
	discordSkuUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			discordSkuAllColumns,
			discordSkuPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update discord_skus, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"discord_skus\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, discordSkuPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(discordSkuType, discordSkuMapping, append(wl, discordSkuPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update discord_skus row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for discord_skus")
	}

	if !cached {
		discordSkuUpdateCacheMut.Lock()
		discordSkuUpdateCache[key] = cache
		discordSkuUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q discordSkuQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q discordSkuQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for discord_skus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for discord_skus")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DiscordSkuSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiscordSkuSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discordSkuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"discord_skus\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, discordSkuPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in discordSku slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all discordSku")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DiscordSku) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DiscordSku) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no discord_skus provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(discordSkuColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	discordSkuUpsertCacheMut.RLock()
	cache, cached := discordSkuUpsertCache[key]
	discordSkuUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			discordSkuAllColumns,
			discordSkuColumnsWithDefault,
			discordSkuColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			discordSkuAllColumns,
			discordSkuPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert discord_skus, could not build update column list")
		}

		ret := strmangle.SetComplement(discordSkuAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(discordSkuPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert discord_skus, could not build conflict column list")
			}

			conflict = make([]string, len(discordSkuPrimaryKeyColumns))
			copy(conflict, discordSkuPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"discord_skus\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(discordSkuType, discordSkuMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(discordSkuType, discordSkuMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert discord_skus")
	}

	if !cached {
		discordSkuUpsertCacheMut.Lock()
		discordSkuUpsertCache[key] = cache
		discordSkuUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single DiscordSku record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DiscordSku) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DiscordSku record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DiscordSku) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DiscordSku provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), discordSkuPrimaryKeyMapping)
	sql := "DELETE FROM \"discord_skus\" WHERE \"sku_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from discord_skus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for discord_skus")
	}

	return rowsAff, nil
}

func (q discordSkuQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q discordSkuQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no discordSkuQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discord_skus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discord_skus")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DiscordSkuSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiscordSkuSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discordSkuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"discord_skus\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, discordSkuPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discordSku slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discord_skus")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DiscordSku) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no DiscordSku provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DiscordSku) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDiscordSku(ctx, exec, o.SkuID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiscordSkuSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DiscordSkuSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiscordSkuSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiscordSkuSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discordSkuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"discord_skus\".* FROM \"discord_skus\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, discordSkuPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DiscordSkuSlice")
	}

	*o = slice

	return nil
}

// DiscordSkuExistsG checks if the DiscordSku row exists.
func DiscordSkuExistsG(ctx context.Context, skuID int64) (bool, error) {
	return DiscordSkuExists(ctx, boil.GetContextDB(), skuID)
}

// DiscordSkuExists checks if the DiscordSku row exists.
func DiscordSkuExists(ctx context.Context, exec boil.ContextExecutor, skuID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"discord_skus\" where \"sku_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, skuID)
	}
	row := exec.QueryRowContext(ctx, sql, skuID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if discord_skus exists")
	}

	return exists, nil
}

// Exists checks if the DiscordSku row exists.
func (o *DiscordSku) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DiscordSkuExists(ctx, exec, o.SkuID)
}
